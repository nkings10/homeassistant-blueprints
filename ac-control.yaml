blueprint:
  name: Temperature-Based AC Control
  description: Automatically turn on or off an air conditioner based on temperature thresholds
  domain: automation
  input:
    ac_entity:
      name: Air Conditioner
      description: The air conditioner entity to control
      selector:
        entity:
          domain: climate
      default: climate.back-lounge-ac
    temp_sensor:
      name: Temperature Sensor
      description: The temperature sensor to monitor (leave empty to use AC's internal sensor)
      selector:
        entity:
          domain: sensor
          device_class: temperature
      default: ""
    high_temp_threshold:
      name: High Temperature Threshold
      description: Turn on AC when temperature reaches or exceeds this value
      selector:
        number:
          min: 17
          max: 30
          step: 0.5
          unit_of_measurement: °C
      default: 25
    low_temp_threshold:
      name: Low Temperature Threshold
      description: Turn off AC when temperature drops to or below this value
      selector:
        number:
          min: 17
          max: 30
          step: 0.5
          unit_of_measurement: °C
      default: 22
    target_temperature:
      name: Target Temperature
      description: Temperature to set when turning on the AC
      selector:
        number:
          min: 17
          max: 30
          step: 0.5
          unit_of_measurement: °C
      default: 22
    ac_mode:
      name: AC Mode
      description: Mode to set when turning on the AC
      selector:
        select:
          options:
            - cool
            - heat
            - heat_cool
            - fan_only
            - dry
      default: cool
    fan_mode:
      name: Fan Mode
      description: Fan mode to set when turning on the AC
      selector:
        select:
          options:
            - auto
            - low
            - medium
            - high
            - silent
            - turbo
      default: auto

# Set the mode to avoid running multiple instances simultaneously
mode: restart

trigger:
  # Trigger when internal AC temperature changes
  - platform: state
    entity_id: !input ac_entity
    attribute: current_temperature
  # Trigger when external sensor changes (if used)
  - platform: state
    entity_id: !input temp_sensor
  # Trigger when AC state changes
  - platform: state
    entity_id: !input ac_entity
  # Also trigger when Home Assistant starts
  - platform: homeassistant
    event: start

condition: []

action:
  # Choose which temperature sensor to use
  - choose:
      # If external temperature sensor is provided and valid
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.variables.temp_sensor != '' and 
                 states(trigger.variables.temp_sensor) not in ['unknown', 'unavailable'] }}
        sequence:
          # Turn ON if temp is high and AC is off
          - if:
              condition: and
              conditions:
                - condition: numeric_state
                  entity_id: !input temp_sensor
                  above_or_equal: !input high_temp_threshold
                - condition: state
                  entity_id: !input ac_entity
                  state: 'off'
              then:
                - service: climate.set_temperature
                  target:
                    entity_id: !input ac_entity
                  data:
                    temperature: !input target_temperature
                - service: climate.set_hvac_mode
                  target:
                    entity_id: !input ac_entity
                  data:
                    hvac_mode: !input ac_mode
                - service: climate.set_fan_mode
                  target:
                    entity_id: !input ac_entity
                  data:
                    fan_mode: !input fan_mode
          
          # Turn OFF if temp is low and AC is on
          - if:
              condition: and
              conditions:
                - condition: numeric_state
                  entity_id: !input temp_sensor
                  below_or_equal: !input low_temp_threshold
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: !input ac_entity
                      state: 'off'
              then:
                - service: climate.turn_off
                  target:
                    entity_id: !input ac_entity
    
    # Default: Use AC's internal temperature sensor
    default:
      # Turn ON if internal temp is high and AC is off
      - if:
          condition: and
          conditions:
            - condition: template
              value_template: >
                {{ state_attr(trigger.variables.ac_entity, 'current_temperature') | float(0) >= trigger.variables.high_temp_threshold | float }}
            - condition: state
              entity_id: !input ac_entity
              state: 'off'
          then:
            - service: climate.set_temperature
              target:
                entity_id: !input ac_entity
              data:
                temperature: !input target_temperature
            - service: climate.set_hvac_mode
              target:
                entity_id: !input ac_entity
              data:
                hvac_mode: !input ac_mode
            - service: climate.set_fan_mode
              target:
                entity_id: !input ac_entity
              data:
                fan_mode: !input fan_mode
      
      # Turn OFF if internal temp is low and AC is on
      - if:
          condition: and
          conditions:
            - condition: template
              value_template: >
                {{ state_attr(trigger.variables.ac_entity, 'current_temperature') | float(0) <= trigger.variables.low_temp_threshold | float }}
            - condition: not
              conditions:
                - condition: state
                  entity_id: !input ac_entity
                  state: 'off'
          then:
            - service: climate.turn_off
              target:
                entity_id: !input ac_entity
