blueprint:
  name: "Temperature-Based AC Control (Internal Sensor)"
  description: "Control your AC based on its internal temperature sensor"
  domain: automation
  input:
    ac_entity:
      name: "Air Conditioner"
      description: "The air conditioner entity to control"
      selector:
        entity:
          domain: climate
      default: climate.back-lounge-ac
    high_temp_threshold:
      name: "High Temperature Threshold"
      description: "Turn on AC when temperature reaches or exceeds this value"
      selector:
        number:
          min: 17
          max: 30
          step: 0.5
          unit_of_measurement: °C
      default: 25
    low_temp_threshold:
      name: "Low Temperature Threshold"
      description: "Turn off AC when temperature drops to or below this value"
      selector:
        number:
          min: 17
          max: 30
          step: 0.5
          unit_of_measurement: °C
      default: 22
    target_temperature:
      name: "Target Temperature"
      description: "Temperature to set when turning on the AC"
      selector:
        number:
          min: 17
          max: 30
          step: 0.5
          unit_of_measurement: °C
      default: 22
    ac_mode:
      name: "AC Mode"
      description: "Mode to set when turning on the AC"
      selector:
        select:
          options:
            - cool
            - heat
            - heat_cool
            - fan_only
            - dry
      default: cool
    fan_mode:
      name: "Fan Mode"
      description: "Fan mode to set when turning on the AC"
      selector:
        select:
          options:
            - auto
            - low
            - medium
            - high
            - silent
            - turbo
      default: auto

mode: restart

trigger:
  - platform: state
    entity_id: !input ac_entity
    attribute: current_temperature
  - platform: state
    entity_id: !input ac_entity
  - platform: homeassistant
    event: start

# Two separate automation sequences to avoid template logic
action:
  - choose:
      # Turn ON AC sequence - activates when temp is high and AC is off
      - conditions:
          - condition: template
            value_template: "{{ state_attr(ac_entity, 'current_temperature') | float(0) >= high_temp_threshold | float }}"
          - condition: state
            entity_id: !input ac_entity
            state: "off"
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input ac_entity
            data:
              temperature: !input target_temperature
          - service: climate.set_hvac_mode
            target:
              entity_id: !input ac_entity
            data:
              hvac_mode: !input ac_mode
          - service: climate.set_fan_mode
            target:
              entity_id: !input ac_entity
            data:
              fan_mode: !input fan_mode
      
      # Turn OFF AC sequence - activates when temp is low and AC is on
      - conditions:
          - condition: template
            value_template: "{{ state_attr(ac_entity, 'current_temperature') | float(0) <= low_temp_threshold | float }}"
          - condition: not
            conditions:
              - condition: state
                entity_id: !input ac_entity
                state: "off"
        sequence:
          - service: climate.turn_off
            target:
              entity_id: !input ac_entity
